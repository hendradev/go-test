on:
  # push:
  #   branches:
  #     - master
  pull_request:
    branches:
      - master
      - development
    types: [opened, synchronize, reopened, closed]
name: Main Workflow
jobs:
  # job-check:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Check closed, if merged=true      
  sonarqube:
    runs-on: ubuntu-latest
    # needs: job-check
    if: ${{ !(github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == false) }}
    steps:
    - name: Dump GitHub context
      env:
        GITHUB_CONTEXT: ${{ toJSON(github) }}
      run: echo "$GITHUB_CONTEXT" 
    # - uses: actions/cache@v2
    #   with:
    #     path: |
    #       ~/.cache/go-build
    #       ~/go/pkg/mod
    #     key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
    #     restore-keys: |
    #       ${{ runner.os }}-go-
    # - uses: actions/checkout@v2
    #   with:
    #     # Disabling shallow clone is recommended for improving relevancy of reporting
    #     fetch-depth: 0    
    # - name: Golang setup
    #   uses: actions/setup-go@v2
    #   with:
    #     go-version: '1.15.2' # The Go version to download (if necessary) and use.
    # - run: | 
    #     echo 'SONAR_HOST_URL='$((grep -w 'sonar.host.url' | cut -d= -f2) < sonar-project.properties) >> $GITHUB_ENV
    # #     echo 'SONAR_TOKEN='$((grep -w 'sonar.login' | cut -d= -f2) < sonar-project.properties) >> $GITHUB_ENV        
    # - run: |
    #     echo ${{ env.SONAR_HOST_URL }}
    # #     echo ${{ env.SONAR_TOKEN }}
    # - name: Dump GitHub context
    #   env:
    #     GITHUB_CONTEXT: ${{ toJSON(github) }}
    #   run: echo "$GITHUB_CONTEXT" 
    # - name: Set properties for pr decoration if event = pull_request
    #   if: ${{ github.event_name == 'pull_request' }}
    #   run: |
    #     echo "" >> sonar-project.properties
    #     echo """sonar.pullrequest.key=${{ github.event.pull_request.number }}""" >> sonar-project.properties
    #     echo """sonar.pullrequest.branch=${{ github.head_ref }}""" >> sonar-project.properties
    #     echo """sonar.pullrequest.base=${{ github.base_ref }} """ >> sonar-project.properties
    #     # echo """sonar.pullrequest.base=master""" >> sonar-project.properties
    #     echo """sonar.pullrequest.github.repository=${{ github.repository }}""" >> sonar-project.properties
    #     cat sonar-project.properties
    # - name: Set branch name for branch analysis if event = push
    #   if: ${{ github.event_name == 'push' }}
    #   run: |
    #     echo "" >> sonar-project.properties
    #     # echo """sonar.branch.name=master""" >> sonar-project.properties
    #     echo """sonar.branch.name=$(echo ${GITHUB_REF#refs/heads/})""" >> sonar-project.properties
    #     cat sonar-project.properties
    # - name: Run go test
    #   run: go test -v ./service -coverprofile=coverages/coverage.out -json
    # - name: SonarQube Scan
    #   # uses: docker://sonarsource/sonar-scanner-cli:latest
    #   # env:
    #   #   GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   #   SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    #   #   SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
    #   uses: sonarsource/sonarqube-scan-action@master
    #   env:
    #     # GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    #     SONAR_HOST_URL: ${{ env.SONAR_HOST_URL }}
    # - name: Check report task
    #   run: cat .scannerwork/report-task.txt
    # - name: SonarQube Quality Gate check
    #   uses: sonarsource/sonarqube-quality-gate-action@master
    #   # Force to fail step after specific time
    #   timeout-minutes: 5
    #   env:
    #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }} 
    # # - uses: ouzi-dev/commit-status-updater@v1.1.0
    # #   with:
    # #     status: "pending"
    # #     url: http://myurl.io/
    # #     description: "this is my status check"
    # #     name: "name of my status check"
